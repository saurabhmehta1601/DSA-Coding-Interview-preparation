Write a function which takes an array and prints the majority element (if it exists), otherwise prints “No Majority Element”. A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element).


{% comment %} O(n^2) {% endcomment %}

METHOD 1  

Approach: The basic solution is to have two loops and keep track of the maximum count for all different elements. If maximum count becomes greater than n/2 then break the loops and return the element having maximum count. If the maximum count doesn’t become more than n/2 then the majority element doesn’t exist.
Algorithm: 
Create a variable to store the max count, count = 0
Traverse through the array from start to end.
For every element in the array run another loop to find the count of similar elements in the given array.
If the count is greater than the max count update the max count and store the index in another variable.
If the maximum count is greater than the half the size of the array, print the element. Else print there is no majority element.


{% comment %} Method 2 O() {% endcomment %}


Approach: Insert elements in BST one by one and if an element is already present then increment the count of the node. At any stage, if the count of a node becomes more than n/2 then return.
Algorithm: 
Create a binary search tree, if same element is entered in the binary search tree the frequency of the node is increased.
traverse the array and insert the element in the binary search tree.
If the maximum frequency of any node is greater than the half the size of the array, then perform a inorder traversal and find the node with frequency greater than half
Else print No majority Element.

Time Complexity: If a Binary Search Tree is used then time complexity will be O(n^2). If a self-balancing-binary-search tree is used then it will be O(nlogn)
Auxiliary Space: O(n). 
As extra space is needed to store the array in tree.


METHOD 3 (Using Moore’s Voting Algorithm):  

Approach: This is a two-step process. 
The first step gives the element that maybe the majority element in the array. If there is a majority element in an array, then this step will definitely return majority element, otherwise, it will return candidate for majority element.
Check if the element obtained from the above step is majority element. This step is necessary as there might be no majority element.

Time Complexity: O(n). 
As two traversal of the array is needed, so the time complexity is linear.
Auxiliary Space: O(1). 
As no extra space is required.


Method 4: Using hashmap
Time complexity : O(n)  Auxiliary Space: O(n).

store all elements with their counts in the hashmap
if any element have count greater than n/2 then it is answer